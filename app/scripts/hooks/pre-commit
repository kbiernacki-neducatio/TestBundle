#!/usr/bin/php
<?php



class Voter {
  private $EXCLUDE = array(
		'app/AppKernel.php',
                'features/bootstrap/FeatureContext.php',
	);
	private $EXCLUDE_BEGIN1 = 'app/DoctrineMigrations/Version';
	private $EXCLUDE_BEGIN_DOC = 'docs/';

	public function detectFileLanguage($file) {
		$filename_pattern_php = '/\.php$/';
		$filename_pattern_js = '/\.js$/';
		if (in_array($file,$this->EXCLUDE) || (strpos($file,$this->EXCLUDE_BEGIN1) === 0) || (strpos($file,$this->EXCLUDE_BEGIN_DOC) === 0) || !file_exists($file)) {
		  return '';
	  }
		if (preg_match($filename_pattern_js, $file)) {
			return 'js';
	  }
	  if (preg_match($filename_pattern_php, $file)) {
			return 'php';
	  }
	  return '';
	}
}
$voter = new Voter();

function addArrayOfUntrackedFilesToArray($files) {
 $output = Array();
 $return = '';
 exec('git ls-files --other --exclude-standard 2> /dev/null', $output, $return);
 foreach ($output as $file) {
   if (!in_array($file,$files)) {
     $files[] = $file;
   }
 }
 exec('git ls-files --modified 2> /dev/null', $output, $return);
 foreach ($output as $file) {
   if (!in_array($file,$files)) {
     $files[] = $file;
   }
 }
 //print_r($output);
 return $files;
}


function returnlistOfFilesFromArgv($args, $colors) {
  $files = Array();
  foreach ($args as $k => $v) {
    if ($k < 2) { continue; }
    if (!file_exists($v)) {
      echo $colors->getColoredString("Error - file " . $v . " does not exists" , "white", "red") . "\n";
      exit(1);
    }
    if (!in_array($v, $files)) {
      $files[] = $v;
    }
  }
  return $files;
}



$colors = new Colors();
$output = array();
$return = 0;

exec('git rev-parse --verify HEAD 2> /dev/null', $output, $return);
$against = $return == 0 ? 'HEAD' : '4b825dc642cb6eb9a060e54bf8d69288fbee4904';
exec("git diff-index --cached --name-only {$against}", $output);

if (isset($argv['1']) && '--all-or-selected' == $argv['1']) {
  if (isset($argv['2'])) {
    $output = returnlistOfFilesFromArgv($argv, $colors);
  }
  else {
    $output = addArrayOfUntrackedFilesToArray($output);
  }
}





$exitStatus = 0;

echo $colors->getColoredString("\n\n###### CHECKING  #######\n", "white", "blue") . "\n";
//print_r($output);
//die();
foreach ($output as $file) {
    $fileLanguage = $voter->detectFileLanguage($file);
    if ($fileLanguage !== 'php') {
      continue;
    }
    $fileEsc = escapeshellarg($file);
    echo $colors->getColoredString("\nFile: $fileEsc\n", "white", "blue") . "\n";

    $outputLint = array();
    exec("php -l $fileEsc 2>&1", $outputLint, $returnLint);
    if ($returnLint != 0) {
	echo $colors->getColoredString("\nLint: FAILED", "gray", "red") . "\n";
        $exitStatus = 1;
        echo implode("\n", $outputLint), "\n";
    }
    else {
      echo $colors->getColoredString("\nLint: PASSED", "gray", "blue") . "\n";
    }


    $phpMdRulesetPath = 'app/phpmdRuleset.xml';
    $outputMd = array();
    exec("php vendor/phpmd/phpmd/src/bin/phpmd $fileEsc text $phpMdRulesetPath 2>&1" , $outputMd, $returnMd);
    if ($returnMd != 0) {
        echo $colors->getColoredString("\nMess detector: FAILED", "gray", "red") . "\n";
        $exitStatus = 1;
        echo implode("\n", $outputMd), "\n";
    }
    else {
      echo $colors->getColoredString("\nMess detector: PASSED", "gray", "blue") . "\n";
    }



    $outputCs = array();
    exec("php vendor/zerkalica/phpcs/scripts/phpcs --ignore='Resources/public' --standard=Symfony2 $fileEsc 2>&1" , $outputCs, $returnCs);
    if ($returnCs != 0) {
        echo $colors->getColoredString("\nCoding standards: FAILED", "gray", "red") . "\n";
        $exitStatus = 1;
        echo implode("\n", $outputCs), "\n";
    }
    else {
      echo $colors->getColoredString("\nCoding standards: PASSED", "gray", "blue") . "\n";
    }

}


// na razie nie uzywane
if (false && isset($argv['1'])  && '--all-or-selected' == $argv['1'] && isset($argv['2'])) {
  // testy PHPUnit
  echo $colors->getColoredString("\nPHPUnit ... ", "gray", "blue") . "\n";
  exec("phpunit -c app 2>&1" , $outputPHPUnit, $returnPHPUnit);
  if ($returnPHPUnit != 0) {
    $exitStatus = 1;
  }
  echo implode("\n", $outputPHPUnit), "\n";
}

foreach ($output as $file) {
	if ($voter->detectFileLanguage($file) !== 'js') {
		continue;
	}
	$fileEsc = escapeshellarg($file);
	echo $colors->getColoredString("\nFile: $fileEsc\n", "white", "blue") . "\n";
	exec("sh jc $fileEsc 2>&1" , $outputJSLint, $returnJSLint);
	if ($returnJSLint != 0) {
        echo $colors->getColoredString("\nJSLint: FAILED", "gray", "red") . "\n";
        //$exitStatus = 1;
        $exitStatus = 0; // not prevent from commiting
        echo implode("\n", $outputJSLint), "\n";
  }
  else {
    echo $colors->getColoredString("\nJSLint: PASSED", "gray", "blue") . "\n";
  }
}

if ($exitStatus != 0) {
echo $colors->getColoredString("\n\n###### ERROR OCCURED. Correct your files and try again #######\n", "white", "red") . "\n";
}
else {
echo $colors->getColoredString("\n\n###### Files seems fine #######\n", "white", "green") . "\n";
}
exit($exitStatus);


$colors = new Colors();



	class Colors {
		private $foreground_colors = array();
		private $background_colors = array();

		public function __construct() {
			// Set up shell colors
			$this->foreground_colors['black'] = '0;30';
			$this->foreground_colors['dark_gray'] = '1;30';
			$this->foreground_colors['blue'] = '0;34';
			$this->foreground_colors['light_blue'] = '1;34';
			$this->foreground_colors['green'] = '0;32';
			$this->foreground_colors['light_green'] = '1;32';
			$this->foreground_colors['cyan'] = '0;36';
			$this->foreground_colors['light_cyan'] = '1;36';
			$this->foreground_colors['red'] = '0;31';
			$this->foreground_colors['light_red'] = '1;31';
			$this->foreground_colors['purple'] = '0;35';
			$this->foreground_colors['light_purple'] = '1;35';
			$this->foreground_colors['brown'] = '0;33';
			$this->foreground_colors['yellow'] = '1;33';
			$this->foreground_colors['light_gray'] = '0;37';
			$this->foreground_colors['white'] = '1;37';

			$this->background_colors['black'] = '40';
			$this->background_colors['red'] = '41';
			$this->background_colors['green'] = '42';
			$this->background_colors['yellow'] = '43';
			$this->background_colors['blue'] = '44';
			$this->background_colors['magenta'] = '45';
			$this->background_colors['cyan'] = '46';
			$this->background_colors['light_gray'] = '47';
		}

		// Returns colored string
		public function getColoredString($string, $foreground_color = null, $background_color = null) {
			$colored_string = "";

			// Check if given foreground color found
			if (isset($this->foreground_colors[$foreground_color])) {
				$colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
			}
			// Check if given background color found
			if (isset($this->background_colors[$background_color])) {
				$colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
			}

			// Add string and end coloring
			$colored_string .=  $string . "\033[0m";

			return $colored_string;
		}

		// Returns all foreground color names
		public function getForegroundColors() {
			return array_keys($this->foreground_colors);
		}

		// Returns all background color names
		public function getBackgroundColors() {
			return array_keys($this->background_colors);
		}
	}

?>
